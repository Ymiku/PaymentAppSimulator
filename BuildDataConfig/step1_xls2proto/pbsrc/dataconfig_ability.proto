/**
* @file:   dataconfig_ability.proto
* @author: jameyli <jameyli AT tencent DOT com>
* @brief:  这个文件是通过工具自动生成的，建议不要手动修改
*/

package dataconfig;
import "ProtoFScalar.proto";
import "xls_enum.proto";

message ABILITY{
    /** 子技能 ID */
    required uint32 id = 1 [default = 0];
    /** Prefab资源路径 */
    optional string prefab_path = 2 [default = ""];
    /** 子技能名称 */
    optional string name = 3 [default = ""];
    /**  技能类型
        （0装备技能 
        1英雄技能 
          2召唤师技能
        3野怪技能
        4宠物技能）
    */
    optional int32 type = 4 [default = 0];
    /** 是否主动技能
        1 主动
        0 被动
    */
    optional int32 is_active = 5 [default = 0];
    /** 这个技能用哪一个tips */
    optional uint32 tips_id = 6 [default = 0];
    /** 是否唯一
        1 唯一 
        0 不唯一
    */
    optional int32 is_unique = 7 [default = 0];
    /** 用于装备技能，当装备卖掉后，以此为key的cd还存在角色身上，再次购买装备时技能需要重新根据此值获取cd */
    optional string cd_name = 8 [default = ""];
    /** 技能标签 */
    optional string tags = 9 [default = ""];
    /** 同标签下的优先级 */
    optional int32 priority_level = 10 [default = 0];
    /** 可打断前摇的状态 
        (见StatusType.cs)
        all states = stun;Forced_Displacement;stasis;
        ensnared;silenced;taunt;suppression
        (红色为部分技能被打断)
    */
    repeated string break_precast_status = 11;
    /** 可打断前摇的行为状态
 (StateMachinEnum.cs) */
    repeated string break_precast_behaviour = 12;
    /** 能打断施法中的状态（见StatusType.cs）
        all states = stun;Forced_Displacement;stasis;
        ensnared;silenced;taunt;suppression
        (红色为部分技能被打断)
    */
    repeated string break_casting_status = 13;
    /** 能打断施法中的行为状态（StateMachinEnum.cs） */
    repeated string break_casting_behaviour = 14;
    /** 死亡是否可以打断被动技能
        （1 可以
         0 不可以）
    */
    optional int32 dying_break_deactive_casting = 15 [default = 0];
    /** 释放技能前停止移动
        （1 停止
         0 不停）
    */
    optional int32 stop_move = 16 [default = 0];
    /** 是否进入施法状态
        （1 进入
         0 不进入）
    */
    optional int32 change_state = 17 [default = 0];
    /** 如果进入了且当前处于施法状态，是否可以切到其他状态而不打断技能
        （0 不可以
        1可以）
    */
    optional int32 can_change_to_other_state = 18 [default = 0];
    /** 排队时间（如果一个技能可以打断上个技能，那么至少需要等待此时间后再执行打断执行） */
    optional ProtoFScalar /*ProtoFScalar*/ wait_time = 19;
    /** 是否排队（0 不排队，1排队） */
    optional int32 if_queue = 20 [default = 0];
    /** 如果需要不排队，当前是在什么技能时可以不排队 */
    repeated uint32 can_simultaneous_abilities = 21;
    /** 当前正在施法，如果不排队，那么是否立即释放(0不释放，1释放) */
    optional int32 is_immediately = 22 [default = 0];
    /** 最大可使用次数（充能次数） */
    repeated int32 max_charge_num = 23;
    /** 保底充能层数
(当开启充能功能时，每次消耗的次数不会小于该值) */
    optional int32 min_charge_num = 24 [default = 0];
    /** 每次施法消耗的数量 */
    optional int32 charge_expend = 25 [default = 0];
    /** 每次的充能时长 */
    repeated ProtoFScalar /*ProtoFScalar*/ charge_lengths = 26;
    /** CD时长
        （1，如果是多段技能共享SlotCD，只给第一段技能配置即可，其他段配置成-1；
        2，如果是多段技能替换之后有各自的CD，那么就各自配置；
        3，如果如装备技能、键位被动技能没有CD，则什么都不用填写）
    */
    repeated ProtoFScalar /*ProtoFScalar*/ cd_lengths = 27;
    /** 技能施放间隔
（用于多段技能） */
    repeated ProtoFScalar /*ProtoFScalar*/ interval_cd = 28;
    /** 技能可用时长
（一般用于多段技能） */
    repeated ProtoFScalar /*ProtoFScalar*/ avalible_time = 29;
    /** 资源类型 */
    optional int32 cost_type = 30 [default = 0];
    /** 资源消耗
（一般是耗蓝） */
    repeated ProtoFScalar /*ProtoFScalar*/ resource_costs = 31;
    /** （按下去后记录cd还是技能打出去了记录cd）是否在释放技能时自动CD
        （0，技能前摇开始时计时（默认）; 
        1，技能前摇结束后开始计时;
        2，程序内设置计时(手动)）
    */
    optional int32 auto_cd = 32 [default = 0];
    /** 英雄技能在前摇时间被打断是否返还CD，0到1
        （0 ，不返还CD；
        其他数字，被打断时返回当前CD（即受到装备等冷却减缩收益后的情况）的百分比）
    */
    optional ProtoFScalar /*ProtoFScalar*/ return_cd_percent = 33;
    repeated string block_ability_status = 34;
    /** 可忽略哪些受控状态施法
        (见StatusType.cs)
        不可填all states，可填：
        stun;Forced_Displacement;stasis;
        silenced;PushAway;taunt;suppression
    */
    repeated string ignore_status = 35;
    /** 造成伤害后暴露视野的时间
大于0为有效时间否则不暴露 */
    optional ProtoFScalar /*ProtoFScalar*/ expose_revealer_duration = 36;
    /** 智能施法下是不是显示一下范围指示器（1为需要，0为不需要可不填） */
    optional int32 need_assistant = 37 [default = 0];
    /** 技能基础伤害(量化技能伤害用) */
    repeated int32 base_damages = 38;
    /** ap加成 */
    repeated ProtoFScalar /*ProtoFScalar*/ ap_bonus = 39;
    /** ad加成 */
    repeated ProtoFScalar /*ProtoFScalar*/ ad_bonus = 40;
    /** 伤害类型(magic,physical,true,pure) */
    optional string damage_type = 41 [default = ""];
    /** 后摇动画强制播放时间 */
    optional ProtoFScalar /*ProtoFScalar*/ after_cast_ani_force_playtime = 42;
    /** 技能自动接普攻时机
        
        0，技能后摇结束时
        1，技能前摇结束时
    */
    optional int32 auto_atk_timing = 43 [default = 0];
}

message ABILITY_ARRAY {
    repeated ABILITY items = 1;
}
